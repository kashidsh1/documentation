
========================================================================================================================================
configmap
========================================================================================================================================
1. while performing application deployments in K8's cluster, sometimes we needd to change the application configuration files depneds on env'
   like dev, prod and QA
2. Cahnge in application config means we need to change s/c code, commit the change , create a new image and go throgh the full deployment process
3. therefor these configuration should be decoupled from image in order to keep containerised application portable.
4. config map-> useful for sharing non-sensitive, un-encrypted configuration information 
========================================================================================================================================
This lets you change easily configuration depending on the environment (development, production, testing) and to dynamically change configuration at runtime.
How it works ??

1.First, you have multiple ConfigMaps, one for each environment.
2.Second, a ConfigMap is created and added to the Kubernetes cluster.
3.Third, containers in the Pod reference the ConfigMap and use its values.
========================================================================================================================================
##########Commands#############################

There are three other ways to create ConfigMaps using the `kubectl create configmap` command. I prefer the methods used above, but here are your options.

Use the contents of an entire directory with 
> kubectl create configmap my-config --from-file=./my/dir/path/

Use the contents of a file or specific set of files with
> kubectl create configmap my-config --from-file=./my/file.txt

Use literal key-value pairs defined on the command line with
> kubectl create configmap my-config --from-literal=key1=value1 --from-literal=key2=value2

=========================================================1.Config by a volume mount in the POD===============================================================================
config_map.yml

apiVersion: v1
kind: Pod
metadata:
  name: myvolconfig
spec:
  containers:
  - name: c1
    image: centos
    command: ["/bin/bash", "-c", "while true; do echo Technical-Guftgu; sleep 5 ; done"]
    volumeMounts:
      - name: testconfigmap
        mountPath: "/tmp/config"   # the config files will be mounted as ReadOnly by default here
  volumes:
  - name: testconfigmap
    configMap:
       name: mymap   # this should match the config map name created in the first step
       items:
       - key: sample.conf
         path: sample.conf
============================================================================================================================================================
============================================================================================================================================================
1. Create a sample.conf file 
2. Create configmap object kubectl create configmap mymap --from-file=sample.conf    #mymap should be used next
3. kubectl get configmap
4. kubectl apply -f config_map.yml
5. we can exec the container and see the file "/tmp/config/sample.conf 
============================================================================================================================================================
============================================================================================================================================================
============================================================================================================================================================
===========================================================2.Config by Env Variables=================================================================================================

apiVersion: v1
kind: Pod
metadata:
  name: myenvconfig
spec:
  containers:
  - name: c1
    image: centos
    command: ["/bin/bash", "-c", "while true; do echo Technical-Guftgu; sleep 5 ; done"]
    env:
    - name: MYENV         # env name in which value of the key is stored
      valueFrom:
        configMapKeyRef:
          name: mymap      # name of the config created
          key: sample.conf           #file of the config

1. Go inside container and echo $MYENV		  
========================================================================================================================================
SECRETS
========================================================================================================================================
1. stores sensitive information
2. Accessed via Volume/Env variables from a container running in the POD.
========================================================================================================================================
deploy_secret.yml

 apiVersion: v1
kind: Pod
metadata:
  name: myvolsecret
spec:
  containers:
  - name: c1
    image: centos
    command: ["/bin/bash", "-c", "while true; do echo Technical-guftgu; sleep 5 ; done"]
    volumeMounts:
      - name: testsecret
        mountPath: "/tmp/mysecrets"   # the secret files will be mounted as ReadOnly by default here
  volumes:
  - name: testsecret
    secret:
       secretName: mysecret  
========================================================
##  echo "root">username.txt; echo "password123">password.txt this way is visible

1.  kubectl create secret generic mysecret --from-file=username.txt --from-file=password.txt
2.  kubectl get secrets
3. kubectl describe secret mysecret
## passing the info to pOD/ container  by including secretName, so that we can see inside 
